---

- name: "Create {{ workspace }} folders to download binaries into"
  file: "dest={{ sources_root_path }}/{{ workspace }}/{{ item.name }}"
  args: 
    state: directory
  sudo: no
  with_items:
    "{{ packages }}"
  register: result
  until: not result|failed
  retries: 5

- name: "Fetch {{ workspace }} binaries"
  get_url: "url={{ item.url }} dest={{ sources_root_path }}/{{ workspace }}/{{ item.name }}.tar.gz"
  when: item.url
  sudo: no
  with_items:
    "{{ packages }}"
  register: result
  until: not result|failed
  retries: 5

- name: "Copy install scripts"
  copy: "src=roles/binaries-builder/files/scripts"
  args:
    dest: "{{ binary_builder_path }}"
    force: yes
  register: result
  until: not result|failed
  retries: 5
  sudo: no

- name: "Ensure files are 0755"
  command: "find {{ scripts_path }} -name *.sh -exec chmod 0755 {} \\;"
  sudo: yes

- name: "Create BOSH-compatible structure of folders to put the compiled {{ workspace }} packages into"
  file: "dest={{ result_root_path }}/{{ workspace }}/{{ item.bosh_blob_path }} state=directory"
  sudo: no
  with_items:
    "{{ packages }}"
  register: result
  until: not result|failed
  retries: 5

- name: "Install {{ workspace }} binaries that do not need compilation"
  shell: "{{ scripts_path }}/update-configs.sh {{ scripts_path }} {{ sources_root_path }}/{{ workspace }} {{ item.name }} {{ result_root_path }}/{{ workspace }}/{{ item.bosh_blob_path }}/{{ item.bosh_blob }}"
  when: (item.action == 'change_config' or item.action == 'update_config')
  sudo: no
  with_items:
    "{{ packages }}"
  register: result
  until: not result|failed
  retries: 5

- name: "Create build folder for {{ workspace }}"
  file: "dest={{ build_root_path}}/{{ workspace }} state=directory"

- name: "Compile packages for {{ workspace }}"
  shell: "{{ scripts_path }}/{{ item.script }} {{ item.name }} {{ scripts_path }} {{ sources_root_path }}/{{ workspace }} {{ build_root_path }}/{{ workspace }} {{ item.bosh_blob_name }} {{ result_root_path }}/{{ workspace }}/{{ item.bosh_blob_path }}/{{ item.bosh_blob }} {{ ansible_ssh_user }}"
  when: item.action == 'compile' and (not compile_only or compile_only == item.slug)
  sudo: yes
  args:
    creates: "{{ result_root_path }}/{{ workspace }}/{{ item.bosh_blob_path }}/{{ item.bosh_blob }}"
  with_items:
    "{{ packages }}"
  register: result
  until: not result|failed
  retries: 3

